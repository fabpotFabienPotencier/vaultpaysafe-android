plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

// AppCenter build configuration
if (System.getenv('APPCENTER_BUILD_ID') != null) {
    println "Running in AppCenter environment - Build ID: ${System.getenv('APPCENTER_BUILD_ID')}"
    
    // Force AppCenter environment paths
    System.setProperty('user.home', '/Users/runner')
    System.setProperty('gradle.user.home', '/Users/runner/.gradle')
    
    // Create default gradle.properties with safe JVM args
    new File('/Users/runner/.gradle/gradle.properties').text = """
org.gradle.jvmargs=-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError
org.gradle.daemon=true
org.gradle.parallel=true
"""
}

android {
    namespace 'com.vaultpaysafe'
    compileSdk 34

    defaultConfig {
        applicationId "com.vaultpaysafe"
        minSdk 24
        targetSdk 34
        versionCode System.getenv('APPCENTER_BUILD_ID') != null ? System.getenv('APPCENTER_BUILD_ID').toInteger() : 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // AppCenter specific signing using env variables if available
            if (System.getenv('APPCENTER_KEYSTORE_PASSWORD') != null) {
                signingConfig signingConfigs.create('appcenterRelease') {
                    storeFile file(System.getenv('APPCENTER_KEYSTORE_FILE') ?: "keystore.jks")
                    storePassword System.getenv('APPCENTER_KEYSTORE_PASSWORD')
                    keyAlias System.getenv('APPCENTER_KEY_ALIAS')
                    keyPassword System.getenv('APPCENTER_KEY_PASSWORD')
                }
            }
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    kotlinOptions {
        jvmTarget = '17'
    }
    
    buildFeatures {
        viewBinding true
        compose true
    }
    
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    
    // Fix specific issues for AppCenter
    packagingOptions {
        resources {
            excludes += ['/META-INF/{AL2.0,LGPL2.1}', 'META-INF/LICENSE.md', 'META-INF/LICENSE-notice.md']
        }
    }
}

// Diagnostic task for AppCenter
tasks.register('appCenterPreBuild') {
    doLast {
        println "========== AppCenter Environment Info =========="
        println "User Home: ${System.getProperty('user.home')}"
        println "Gradle User Home: ${System.getProperty('gradle.user.home')}"
        println "Working Directory: ${new File('.').absolutePath}"
        println "Java Version: ${System.getProperty('java.version')}"
        println "Java Home: ${System.getProperty('java.home')}"
        println "OS Name: ${System.getProperty('os.name')}"
        
        // List important environment variables
        System.getenv().each { key, value ->
            if (key.startsWith("APPCENTER_") || key.startsWith("GRADLE_") || key.startsWith("ANDROID_") || key.startsWith("JAVA_")) {
                println "${key}: ${value}"
            }
        }
        println "=============================================="
        
        // Ensure gradle.properties exists with correct settings
        def gradleUserHome = System.getProperty('gradle.user.home') ?: "${System.getProperty('user.home')}/.gradle"
        def gradlePropsFile = new File("${gradleUserHome}/gradle.properties")
        if (!gradlePropsFile.exists()) {
            gradlePropsFile.parentFile.mkdirs()
            gradlePropsFile.text = """
org.gradle.jvmargs=-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError
org.gradle.daemon=true
org.gradle.parallel=true
"""
            println "Created gradle.properties at ${gradlePropsFile.absolutePath}"
        }
    }
}

// Hook into build process for AppCenter
gradle.taskGraph.whenReady { taskGraph ->
    if (System.getenv('APPCENTER_BUILD_ID') != null) {
        taskGraph.allTasks.each { task ->
            if (task.name.startsWith('assemble') || task.name.startsWith('bundle')) {
                task.dependsOn(tasks.named('appCenterPreBuild'))
            }
        }
    }
}

dependencies {
    // Core Android Libraries
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.2'
    implementation 'androidx.activity:activity-ktx:1.8.0'
    implementation 'androidx.fragment:fragment-ktx:1.6.1'

    // Compose
    implementation platform('androidx.compose:compose-bom:2023.08.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material:material-icons-extended'
    implementation 'androidx.activity:activity-compose:1.8.0'
    implementation 'androidx.navigation:navigation-compose:2.7.4'
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
    
    // Networking
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.11.0'
    
    // Dependency Injection
    implementation 'com.google.dagger:hilt-android:2.48'
    kapt 'com.google.dagger:hilt-android-compiler:2.48'
    
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    
    // Room Database
    implementation 'androidx.room:room-runtime:2.6.0'
    implementation 'androidx.room:room-ktx:2.6.0'
    kapt 'androidx.room:room-compiler:2.6.0'
    
    // Image Loading
    implementation 'io.coil-kt:coil-compose:2.4.0'
    
    // Security
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'
    implementation 'androidx.biometric:biometric:1.2.0-alpha05'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
} 